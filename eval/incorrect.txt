index: 17
db_id: concert_singer
medium pred: select highest, average from stadium
medium gold: select max(capacity), average from stadium

index: 18
db_id: concert_singer
medium pred: select average, highest from stadium
medium gold: select avg(capacity) ,  max(capacity) from stadium

index: 32
db_id: concert_singer
hard pred: select name from stadium where year != 2014
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014

index: 39
db_id: concert_singer
hard pred: select t1.name from singer as t1 join singer_in_concert as t2 on t1.singer_id = t2.singer_id where t2.year = 2014
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014

index: 48
db_id: pets_1
medium pred: select pet_age from pets where pettype = "dog" order by pet_age limit 1
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1

index: 50
db_id: pets_1
medium pred: select pet_age, pettype from pets group by pettype order by max(weight) desc limit 1
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType

index: 54
db_id: pets_1
hard pred: select count(*) from pets where pettype = "dog" and pet_age > 100 intersect select count(*) from has_pet as t1 join student as t2 on t1.stuid = t2.stuid where t2.sex = "F"
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'

index: 63
db_id: pets_1
extra pred: select major from student where stuid not in (select stuid from has_pet where petid in (select petid from pets where pettype = "cat"))
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

index: 66
db_id: pets_1
extra pred: select fname, age from student where stuid not in (select stuid from has_pet where petid in (select petid from pets where pettype = 'cat'))
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

index: 67
db_id: pets_1
extra pred: select fname from student where major = 'Biology' and stuid not in (select stuid from has_pet where petid in (select petid from pets where pettype = 'cat'))
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

index: 74
db_id: pets_1
medium pred: select pet_age, avg(weight) from pets group by pettype
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype

index: 76
db_id: pets_1
medium pred: select fname, age from student where stuid in (select stuid from has_pet)
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid

index: 77
db_id: pets_1
medium pred: select distinct fname, age from student where stuid in (select stuid from has_pet)
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid

index: 80
db_id: pets_1
medium pred: select count(*), t1.fname, t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.fname, t1.lname
medium gold: SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid

index: 94
db_id: car_1
medium pred: select maker, id, count(*) from car_makers group by maker
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;

index: 95
db_id: car_1
medium pred: select id, fullname, count(*) from car_makers group by id
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;

index: 96
db_id: car_1
hard pred: select model from cars_data order by horsepower limit 1
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;

index: 97
db_id: car_1
hard pred: select model from cars_data order by horsepower limit 1
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;

index: 98
db_id: car_1
extra pred: select model from cars_data where weight < (select avg(weight) from cars_data)
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)

index: 99
db_id: car_1
extra pred: select model from cars_data where weight < (select avg(weight) from cars_data)
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)

index: 100
db_id: car_1
extra pred: select t1.fullname from car_makers as t1 join cars_data as t2 on t1.id = t2.id where t2.year = 1970
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';

index: 101
db_id: car_1
extra pred: select distinct t1.maker from car_makers as t1 join cars_data as t2 on t1.id = t2.id where t2.year = 1970
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';

index: 102
db_id: car_1
extra pred: select make, production_time from cars_data where year = (select min(year) from cars_data)
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

index: 103
db_id: car_1
extra pred: select maker, year from cars_data order by year limit 1
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

index: 104
db_id: car_1
hard pred: select distinct model from cars_data where year > 1980
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;

index: 105
db_id: car_1
hard pred: select distinct model from cars_data where year > 1980
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;

index: 106
db_id: car_1
hard pred: select t1.continent, count(*) from continents as t1 join car_makers as t2 on t1.contid = t2.contid group by t1.continent
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;

index: 107
db_id: car_1
hard pred: select t1.continent, count(*) from continents as t1 join car_makers as t2 on t1.contid = t2.country group by t1.continent
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;

index: 108
db_id: car_1
extra pred: select countryid, countryname from countries group by countryid order by count(*) desc limit 1
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;

index: 110
db_id: car_1
medium pred: select count(*), fullname from car_makers group by fullname
medium gold: select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;

index: 111
db_id: car_1
medium pred: select count(*), id, fullname from car_makers group by id
medium gold: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;

index: 112
db_id: car_1
medium pred: select accelerate from car_names where make = "amc hornet sportabout (sw)"
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';

index: 113
db_id: car_1
medium pred: select accelerate from car_names where make = "amc hornet sportabout (sw)"
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';

index: 116
db_id: car_1
hard pred: select count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.countryname = "usa"
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';

index: 117
db_id: car_1
hard pred: select count(*) from car_makers where country = "USA"
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';

index: 122
db_id: car_1
medium pred: select distinct maker, model from model_list union select maker, model from car_names
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;

index: 124
db_id: car_1
medium pred: select countryid, countryname from countries group by countryid having count(*) >= 1
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;

index: 125
db_id: car_1
medium pred: select countryid, countryname from countries group by countryid having count(*) >= 1
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;

index: 130
db_id: car_1
extra pred: select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.continent = "europe" group by t1.countryname having count(*) >= 3
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

index: 131
db_id: car_1
extra pred: select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.continent = "europe" group by t1.countryname having count(*) >= 3
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

index: 132
db_id: car_1
extra pred: select make, max(horsepower) from cars_data where cylinders = 3 group by make
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;

index: 133
db_id: car_1
extra pred: select max(horsepower) from cars_data where cylinders = 3
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;

index: 134
db_id: car_1
hard pred: select model from cars_data order by mpg desc limit 1
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;

index: 135
db_id: car_1
hard pred: select model from cars_data order by mpg desc limit 1
hard gold: select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;

index: 138
db_id: car_1
medium pred: select avg(edispl) from cars_data where model = "volvo"
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';

index: 139
db_id: car_1
medium pred: select avg(edispl) from cars_data where cylinders = "volvo"
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';

index: 141
db_id: car_1
medium pred: select max(accelerate) from cars_data group by cylinders
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;

index: 143
db_id: car_1
hard pred: select model from model_list group by model order by count(*) desc limit 1
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;

index: 150
db_id: car_1
medium pred: select maker, id from car_makers group by maker having count(*) > 3
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;

index: 151
db_id: car_1
medium pred: select maker, id from car_makers group by maker having count(*) > 3
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;

index: 152
db_id: car_1
extra pred: select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model where t1.maker = "General Motors" or t2.mpg > 3500
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;

index: 153
db_id: car_1
extra pred: select distinct model from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = "General Motors" or weight > 3500
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;

index: 155
db_id: car_1
easy pred: select distinct year from cars_data where weight < 4000 intersect select distinct year from cars_data where weight > 3000
easy gold: select distinct year from cars_data where weight between 3000 and 4000;

index: 158
db_id: car_1
extra pred: select cylinders from cars_data where accelerate = (select min(accelerate) from cars_data)
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;

index: 159
db_id: car_1
extra pred: select cylinders from cars_data where accelerate = (select min(accelerate) from cars_data)
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;

index: 160
db_id: car_1
hard pred: select count(*) from cars_data where accelerate > (select max(accelerate) from cars_data)
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

index: 161
db_id: car_1
hard pred: select count(*) from cars_data where accelerate > (select max(accelerate) from cars_data)
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

index: 166
db_id: car_1
extra pred: select model from car_names where cylinders = 4 order by horsepower desc limit 1
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;

index: 167
db_id: car_1
extra pred: select model from car_names where cylinders = 4 order by horsepower desc limit 1
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;

index: 168
db_id: car_1
extra pred: select makeid, make from car_names where model not in (select model from cars_data where cylinders <= 3 and horsepower > (select min(horsepower) from cars_data))
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;

index: 169
db_id: car_1
extra pred: select makeid, make from car_names where cylinders < 4
extra gold: select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;

index: 172
db_id: car_1
extra pred: select model from model_list where model != 'ford' and weight < 3500
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';

index: 173
db_id: car_1
extra pred: select distinct model from model_list where model != "ford" and mpg < 3500
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';

index: 176
db_id: car_1
extra pred: select id, maker from car_makers group by maker having count(*) >= 2;
extra gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;

index: 177
db_id: car_1
extra pred: select id, maker from car_makers group by maker having count(*) >= 2 and count(*) > 3
extra gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;

index: 178
db_id: car_1
extra pred: select id, countryname from countries where countryid in (select country from car_makers group by country having count(*) > 3 or select country from car_makers where maker = 'fiat'
extra gold: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';

index: 179
db_id: car_1
extra pred: select id, countryname from countries where countryid in ( select id from car_makers group by id having count(*) > 3 or maker = "fiat" );
extra gold: select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';

index: 207
db_id: flight_2
easy pred: select count(*) from airports where airportcode = "ATO"
easy gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"

index: 214
db_id: flight_2
medium pred: select count(*) from flights where airline = 'JetBlue Airways'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"

index: 215
db_id: flight_2
medium pred: select count(*) from flights where airline = "JetBlue Airways"
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"

index: 223
db_id: flight_2
extra pred: select city from airports group by city order by count(*) desc limit 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

index: 225
db_id: flight_2
extra pred: select city from airports group by city order by count(*) desc limit 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

index: 226
db_id: flight_2
extra pred: select destairport from flights group by destairport order by count(*) desc limit 1
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1

index: 228
db_id: flight_2
extra pred: select destairport from flights group by destairport order by count(*) asc limit 1
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1

index: 229
db_id: flight_2
extra pred: select destairport from flights group by destairport order by count(*) asc limit 1
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1

index: 230
db_id: flight_2
extra pred: select airline from flights group by airline order by count(*) desc limit 1
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1

index: 231
db_id: flight_2
extra pred: select airline from flights group by airline order by count(*) desc limit 1
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1

index: 233
db_id: flight_2
extra pred: select t1.abbreviation from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.abbreviation order by count(*) asc limit 1
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1

index: 242
db_id: flight_2
medium pred: select airline from flights group by airline having count(*) >= 10
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10

index: 243
db_id: flight_2
medium pred: select airline from flights group by airline having count(*) >= 10
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10

index: 244
db_id: flight_2
medium pred: select airline from flights group by airline having count(*) < 200
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200

index: 245
db_id: flight_2
medium pred: select airline from flights group by airline having count(*) < 200
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200

index: 246
db_id: flight_2
medium pred: select flightno from flights where airline = "United Airlines"
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"

index: 247
db_id: flight_2
medium pred: select flightno from flights where airline = "United Airlines"
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"

index: 270
db_id: employee_hire_evaluation
medium pred: select name, district from shop order by number_products desc limit 1
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1

index: 271
db_id: employee_hire_evaluation
medium pred: select name, district from shop order by number_products desc limit 1
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1

index: 280
db_id: employee_hire_evaluation
hard pred: select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id group by t2.employee_id order by sum(t2.bonus) desc limit 1
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1

index: 285
db_id: employee_hire_evaluation
extra pred: select name from shop group by name order by count(*) desc limit 1
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1

index: 296
db_id: employee_hire_evaluation
easy pred: select count(*) from shop group by location
easy gold: SELECT count(DISTINCT LOCATION) FROM shop

index: 297
db_id: employee_hire_evaluation
easy pred: select count(*) from shop group by location
easy gold: SELECT count(DISTINCT LOCATION) FROM shop

index: 312
db_id: cre_Doc_Template_Mgt
extra pred: select template_id, template_type_code from templates group by template_id order by count(*) desc limit 1
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1

index: 313
db_id: cre_Doc_Template_Mgt
extra pred: select template_id, template_type_code from templates group by template_id order by count(*) desc limit 1
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1

index: 323
db_id: cre_Doc_Template_Mgt
easy pred: select distinct template_type_code from ref_template_types
easy gold: SELECT DISTINCT template_type_code FROM Templates

index: 342
db_id: cre_Doc_Template_Mgt
medium pred: select template_type_code, count(*) from documents group by template_type_code
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code

index: 345
db_id: cre_Doc_Template_Mgt
extra pred: select t1.template_type_code from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code group by t1.template_type_code order by count(*) desc limit 1
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1

index: 346
db_id: cre_Doc_Template_Mgt
hard pred: select template_type_code from ref_template_types where template_type_code not in (select template_type_code from templates)
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id

index: 347
db_id: cre_Doc_Template_Mgt
hard pred: select template_type_code from ref_template_types where template_type_code not in (select template_type_code from templates)
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id

index: 354
db_id: cre_Doc_Template_Mgt
medium pred: select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID

index: 355
db_id: cre_Doc_Template_Mgt
medium pred: select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID

index: 356
db_id: cre_Doc_Template_Mgt
medium pred: select template_id from templates where template_type_code = "Presentation"
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"

index: 357
db_id: cre_Doc_Template_Mgt
medium pred: select template_id from templates where template_type_code = 'Presentation'
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"

index: 370
db_id: cre_Doc_Template_Mgt
medium pred: select document_id, document_name, count(*) from paragraphs group by document_id
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id

index: 371
db_id: cre_Doc_Template_Mgt
medium pred: select document_id, document_name, count(*) from documents group by document_id
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id

index: 374
db_id: cre_Doc_Template_Mgt
extra pred: select document_id, document_name from documents order by count(*) desc limit 1
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1

index: 375
db_id: cre_Doc_Template_Mgt
extra pred: select document_id, document_name from documents order by count(*) desc limit 1
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1

index: 387
db_id: course_teach
medium pred: select name, age, hometown from teacher
medium gold: SELECT Age ,  Hometown FROM teacher

index: 400
db_id: course_teach
medium pred: select t1.name, t2.course from teacher as t1 join course_arrange as t2 on t1.teacher_id = t2.teacher_id
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID

index: 401
db_id: course_teach
medium pred: select t1.name, t2.course_id from teacher as t1 join course_arrange as t2 on t1.teacher_id = t2.teacher_id
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID

index: 402
db_id: course_teach
hard pred: select t1.name, t2.course from teacher as t1 join course_arrange as t2 on t1.teacher_id = t2.teacher_id order by t1.name
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name

index: 403
db_id: course_teach
hard pred: select t1.name, t2.course from teacher as t1 join course_arrange as t2 on t1.teacher_id = t2.teacher_id order by t1.name
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name

index: 404
db_id: course_teach
hard pred: select t2.name from course as t1 join teacher as t2 on t1.course_id = t2.teacher_id where t1.course = 'Math'
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"

index: 405
db_id: course_teach
hard pred: select t1.name from course as t1 join course_arrange as t2 on t1.course_id = t2.course_id where t1.course = 'Math'
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"

index: 413
db_id: museum_visit
medium pred: select name from visitor where level_of_membership > 4 order by level desc
medium gold: SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC

index: 415
db_id: museum_visit
medium pred: select name, level_of_membership from visitor where level_of_membership > 4 order by age
medium gold: SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC

index: 421
db_id: museum_visit
extra pred: select t1.id, t1.name, t1.level_of_membership from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t1.id order by sum(t2.total_spent) desc limit 1
extra gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1

index: 426
db_id: museum_visit
medium pred: select total_spent from visit where level_of_membership = 1
medium gold: SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1

index: 427
db_id: museum_visit
extra pred: select t1.name from visitor as t1 join visit as t2 on t1.id = t2.visitor_id where t2.museum_id.open_year < 2009 intersect select t1.name from visitor as t1 join visit as t2 on t1.id = t2.visitor_id where t2.museum_id.open_year > 2011
extra gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011

index: 440
db_id: wta_1
easy pred: select loser_rank from matches order by loser_rank desc limit 1
easy gold: SELECT min(loser_rank) FROM matches

index: 441
db_id: wta_1
easy pred: select loser_rank from matches group by loser_rank order by count(*) desc limit 1
easy gold: SELECT min(loser_rank) FROM matches

index: 445
db_id: wta_1
easy pred: select count(*) from matches group by loser_name
easy gold: SELECT count(DISTINCT loser_name) FROM matches

index: 448
db_id: wta_1
hard pred: select t1.first_name, t1.last_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.year = 2013 intersect select t1.first_name, t1.last_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.year = 2016
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016

index: 449
db_id: wta_1
hard pred: select t1.first_name, t1.last_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where year = 2013 intersect select t1.first_name, t1.last_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where year = 2016
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016

index: 454
db_id: wta_1
medium pred: select first_name, country_code from players order by birth_date desc limit 1
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1

index: 455
db_id: wta_1
medium pred: select first_name, country_code from players order by birth_date desc limit 1
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1

index: 460
db_id: wta_1
hard pred: select t1.first_name, t1.country_code from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t2.player_id order by count(*) desc limit 1
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1

index: 461
db_id: wta_1
hard pred: select t1.first_name, t1.country_code from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t2.player_id order by count(*) desc limit 1
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1

index: 469
db_id: wta_1
medium pred: select t1.winner_name, t1.winner_hand, t1.winner_ht, t2.loser_name, t2.loser_hand, t2.loser_ht from matches as t1 join matches as t2 on t1.match_num = t2.match_num where t1.minutes = (select max(minutes) from matches)
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1

index: 470
db_id: wta_1
medium pred: select avg(ranking), first_name from rankings group by first_name
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

index: 471
db_id: wta_1
medium pred: select first_name, avg(ranking_points) from players group by first_name
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

index: 473
db_id: wta_1
medium pred: select first_name, sum(ranking_points) from rankings group by first_name
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

index: 480
db_id: wta_1
medium pred: select ranking_date, count(*) from rankings group by ranking_date
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date

index: 481
db_id: wta_1
medium pred: select ranking_date, count(*) from rankings group by ranking_date
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date

index: 482
db_id: wta_1
medium pred: select count(*) from matches group by year
medium gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR

index: 483
db_id: wta_1
medium pred: select count(*) from matches group by year
medium gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR

index: 484
db_id: wta_1
medium pred: select t1.first_name, t1.last_name, t2.winner_rank from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_age limit 3
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

index: 485
db_id: wta_1
medium pred: select t1.first_name, t1.last_name, t2.winner_rank from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_age limit 3
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

index: 488
db_id: wta_1
hard pred: select t1.first_name, t1.last_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1

index: 489
db_id: wta_1
hard pred: select t1.first_name, t1.last_name, t1.country_code, t1.birth_date from players as t1 join rankings as t2 on t1.player_id = t2.player_id where t2.winner_rank_points = (select max(winner_rank_points) from matches)
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1

index: 494
db_id: battle_death
medium pred: select name, date, result from battle
medium gold: SELECT name ,  date FROM battle

index: 495
db_id: battle_death
medium pred: select max(toll), min(toll) from death group by toll
medium gold: SELECT max(killed) ,  min(killed) FROM death

index: 496
db_id: battle_death
easy pred: select avg(injured) from death group by injured
easy gold: SELECT avg(injured) FROM death

index: 497
db_id: battle_death
medium pred: select note, killed, injured from death where caused_by_ship_id in (select id from ship where tonnage = 't')
medium gold: SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'

index: 500
db_id: battle_death
hard pred: select t1.id, t1.name from battle as t1 join death as t2 on t1.id = t2.caused_by_ship_id group by t1.id having sum(t2.killed) > 10
hard gold: SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10

index: 501
db_id: battle_death
extra pred: select t1.id, t1.name from ship as t1 join death as t2 on t1.id = t2.caused_by_ship_id group by t1.id order by sum(t2.injured) desc limit 1
extra gold: SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1

index: 503
db_id: battle_death
easy pred: select count(*) from battle group by result
easy gold: SELECT count(DISTINCT RESULT) FROM battle

index: 504
db_id: battle_death
extra pred: select count(*) from battle where result != "lost"
extra gold: SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );

index: 506
db_id: battle_death
extra pred: select name, result, bulgarian_commander from battle where id not in (select id from ship where location = "English Channel")
extra gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'

index: 508
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT line_1 ,  line_2 FROM addresses

index: 509
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT line_1 ,  line_2 FROM addresses

index: 510
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT count(*) FROM Courses

index: 511
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT count(*) FROM Courses

index: 512
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. The course_name contains 1s such as math. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. The department_name contains 1s such as math. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. select t1.address_id from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'

index: 513
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. The course_name contains 1s such as math. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. The department_name contains 1s such as math. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. select t1.address_id from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'

index: 514
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. The city contains 1s such as Port Chelsea. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts select t1.address_id from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id where t1.city = "Port Chelsea"
easy gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'

index: 515
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. The city contains 1s such as Port Chelsea. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts select t1.address_id from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id where t1.city = "Port Chelsea"
easy gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'

index: 516
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1

index: 517
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1

index: 518
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs

index: 519
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs

index: 520
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs

index: 521
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs

index: 522
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'

index: 523
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'

index: 524
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT section_name ,  section_description FROM Sections

index: 525
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT section_name ,  section_description FROM Sections

index: 526
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2

index: 527
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2

index: 528
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT section_name FROM Sections ORDER BY section_name DESC

index: 529
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT section_name FROM Sections ORDER BY section_name DESC

index: 530
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1

index: 531
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1

index: 532
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'

index: 533
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'

index: 534
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

index: 535
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

index: 536
db_id: student_transcripts_tracking
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. The degree_summary_name contains 1s such as Bachelor. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts select t1.address_id from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'

index: 537
db_id: student_transcripts_tracking
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'

index: 538
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1

index: 539
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1

index: 540
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1

index: 541
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1

index: 542
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

index: 543
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

index: 544
db_id: student_transcripts_tracking
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )

index: 545
db_id: student_transcripts_tracking
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )

index: 546
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id

index: 547
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id

index: 548
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1

index: 549
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1

index: 550
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

index: 551
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

index: 552
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2

index: 553
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2

index: 554
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. The first_name contains 1s such as Timmothy.The last_name contains 1s such as Ward. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id where t2.student_enrolment_id = 1
medium gold: SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'

index: 555
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. The first_name contains 1s such as Timmothy.The last_name contains 1s such as Ward. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id where t2.student_enrolment_id = 1
medium gold: select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'

index: 556
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1

index: 557
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1

index: 558
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1

index: 559
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1

index: 560
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id

index: 561
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id

index: 562
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1

index: 563
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1

index: 564
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT avg(transcript_date) FROM Transcripts

index: 565
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT avg(transcript_date) FROM Transcripts

index: 566
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

index: 567
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

index: 568
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT count(*) FROM Transcripts

index: 569
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT count(*) FROM Transcripts

index: 570
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1

index: 571
db_id: student_transcripts_tracking
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1

index: 572
db_id: student_transcripts_tracking
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1

index: 573
db_id: student_transcripts_tracking
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1

index: 574
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1

index: 575
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1

index: 576
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. The degree_summary_name contains 1s such as Bachelor, Master. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id where t2.student_enrolment_id = 1
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

index: 577
db_id: student_transcripts_tracking
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

index: 578
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT count(DISTINCT current_address_id) FROM Students

index: 579
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT count(DISTINCT current_address_id) FROM Students

index: 580
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC

index: 581
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC

index: 582
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'

index: 583
db_id: student_transcripts_tracking
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_name, transcript_description, other_details. transcript_id is the primary key. select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3, t1.city, t1.zip_postcode, t1.state_province_county, t1.country from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'

index: 584
db_id: student_transcripts_tracking
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. The country contains 1s such as Haiti. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns select t1.address_id, t1.line_1, t1.line_2, t1.line_3 from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3 from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'

index: 585
db_id: student_transcripts_tracking
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. The country contains 1s such as Haiti. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns select t1.address_id, t1.line_1, t1.line_2, t1.line_3 from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.current_address_id union select t1.address_id, t1.line_1, t1.line_2, t1.line_3 from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.permanent_address_id
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'

index: 598
db_id: tvshow
medium pred: select count(*) from tv_channel group by content
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;

index: 599
db_id: tvshow
medium pred: select count(*) from tv_channel
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;

index: 607
db_id: tvshow
hard pred: select language from tv_channel group by language order by count(*) asc limit 1
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;

index: 626
db_id: tvshow
medium pred: select episode from tv_series where channel.series_name = "Sky Radio"
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

index: 627
db_id: tvshow
medium pred: select episode from tv_series where series_name = "Sky Radio"
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";

index: 633
db_id: tvshow
medium pred: select package_option from tv_channel where hight_definition_tv = 'Yes'
medium gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"

index: 636
db_id: tvshow
hard pred: select country from tv_channel where id not in (select channel from cartoon where written_by = "Todd Casey")
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

index: 637
db_id: tvshow
hard pred: select country from tv_channel where country != "USA"
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

index: 638
db_id: tvshow
extra pred: select t1.series_name, t1.country from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.content = "cartoon" and directed_by = "Ben Jones" and directed_by = "Michael Chang"
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'

index: 639
db_id: tvshow
extra pred: select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where directed_by = "Ben Jones" or directed_by = "Michael Chang"
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'

index: 643
db_id: tvshow
easy pred: select id from tv_channel group by id having count(*) > 2
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2

index: 646
db_id: tvshow
hard pred: select package_option from tv_channel where package_option != "Option"
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')

index: 665
db_id: poker_player
medium pred: select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id group by t2.people_id order by count(*) asc
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made

index: 668
db_id: poker_player
hard pred: select money_rank from poker_player order by height desc limit 1
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1

index: 699
db_id: voter_1
extra pred: select area_code from votes group by area_code order by count(*) desc limit 1
extra gold: SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1

index: 701
db_id: voter_1
extra pred: select distinct t1.area_code from area_code_state as t1 join votes as t2 on t1.area_code = t2.state where t2.contestant_number = 1 intersect select distinct t1.area_code from area_code_state as t1 join votes as t2 on t1.area_code = t2.state where t2.contestant_number = 2
extra gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'

index: 708
db_id: world_1
easy pred: select sum(surfacearea) from country where continent = "Carribean"
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"

index: 711
db_id: world_1
medium pred: select district from city where name = "Kabul"
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"

index: 712
db_id: world_1
medium pred: select district from city where name = "Kabul"
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"

index: 723
db_id: world_1
medium pred: select sum(t1.population), max(t2.gnp) from country as t1 join country as t2 on t1.code = t2.code where continent = "Asia"
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"

index: 724
db_id: world_1
medium pred: select sum(surfacearea), gnp from country where continent = "Asia" group by continent order by gnp desc limit 1
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"

index: 729
db_id: world_1
easy pred: select population from city where district = "Gelderland"
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"

index: 738
db_id: world_1
medium pred: select count(*) from countrylanguage where countrycode = (select countrycode from country where name = "Aruba")
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"

index: 739
db_id: world_1
medium pred: select count(*) from countrylanguage where countrycode = "Afghanistan" and isofficial = '1'
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

index: 740
db_id: world_1
medium pred: select count(*) from countrylanguage where countrycode = "Afghanistan" and isofficial = "1"
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

index: 741
db_id: world_1
extra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t2.countrycode order by count(*) desc limit 1
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1

index: 742
db_id: world_1
extra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t2.countrycode order by sum(t2.percentage) desc limit 1
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1

index: 745
db_id: world_1
easy pred: select count(*) from countrylanguage where language = "English" and language = "Dutch"
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")

index: 746
db_id: world_1
easy pred: select count(*) from countrylanguage where language = "English" and language = "Dutch"
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")

index: 749
db_id: world_1
extra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = "English" and t2.language = "French"
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"

index: 750
db_id: world_1
extra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = "English" and t2.language = "French"
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"

index: 752
db_id: world_1
medium pred: select count(*) from country where continent = "Chinese"
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"

index: 755
db_id: world_1
extra pred: select country from countrylanguage where language = "English" or language = "Dutch"
extra gold: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"

index: 756
db_id: world_1
extra pred: select country from countrylanguage where language = "English" or language = "Dutch"
extra gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"

index: 759
db_id: world_1
hard pred: select language from countrylanguage where countrycode in ( select countrycode from country where governmentform = 'Republic' group by countrycode having count(*) = 1 )
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1

index: 761
db_id: world_1
extra pred: select t1.name from city as t1 join country as t2 on t1.countrycode = t2.code where t2.name = "English" order by t1.population desc limit 1
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1

index: 762
db_id: world_1
extra pred: select t1.name from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = "English" order by t1.population desc limit 1
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1

index: 765
db_id: world_1
extra pred: select avg(lifeexpectancy) from country where language != "English"
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")

index: 766
db_id: world_1
extra pred: select lifeexpectancy from country where language != "English"
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")

index: 767
db_id: world_1
extra pred: select sum(population) from country where language != "English"
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")

index: 768
db_id: world_1
extra pred: select population from country where language != "English"
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")

index: 769
db_id: world_1
medium pred: select t1.language from countrylanguage as t1 join country as t2 on t1.countrycode = t2.code where t2.headofstate = "Beatrix"
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"

index: 770
db_id: world_1
medium pred: select t1.language from countrylanguage as t1 join country as t2 on t1.countrycode = t2.code where t2.headofstate = "Beatrix"
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"

index: 771
db_id: world_1
medium pred: select count(distinct t1.language) from countrylanguage as t1 join country as t2 on t1.countrycode = t2.code where t2.indepyear < 1930
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"

index: 772
db_id: world_1
medium pred: select count(distinct language) from countrylanguage where countrycode in (select code from country where indepyear < 1930)
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"

index: 775
db_id: world_1
extra pred: select name from country where population < (select min(population) from country where continent = 'Asia') and continent = 'Africa'
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")

index: 777
db_id: world_1
extra pred: select name from country where population > (select min(population) from country where continent = 'Africa') and continent = 'Asia'
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")

index: 779
db_id: world_1
hard pred: select countrycode from countrylanguage where language != "English"
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

index: 780
db_id: world_1
hard pred: select countrycode from countrylanguage where language != "English"
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

index: 783
db_id: world_1
hard pred: select code from country where governmentform != "Republic" and language != "English"
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

index: 784
db_id: world_1
hard pred: select code from country where governmentform != "Republic" and language != "English"
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

index: 785
db_id: world_1
extra pred: select t1.name from city as t1 join country as t2 on t1.countrycode = t2.code where t2.continent = "Europe" and t2.language != "English"
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')

index: 786
db_id: world_1
extra pred: select name from city where countrycode in (select country from country where continent = "Europe" except select country from countrylanguage where language = "English")
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')

index: 787
db_id: world_1
hard pred: select t1.name from city as t1 join country as t2 on t1.countrycode = t2.code where t2.continent = "Asia" and t2.language = "Chinese" group by t1.name having count ( distinct t1.name ) = 1;
hard gold: select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"

index: 788
db_id: world_1
hard pred: select t1.name from city as t1 join country as t2 on t1.countrycode = t2.code where t2.continent = "Asia" and t2.language = "Chinese"
hard gold: SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"

index: 811
db_id: world_1
hard pred: select sum ( t1.surfacearea ), avg ( t1.surfacearea ) from country where continent = "North America" and surfacearea > 3000;
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000

index: 812
db_id: world_1
hard pred: select sum ( t1.surfacearea ), avg ( t1.surfacearea ) from country where continent = "North America" and surfacearea > 3000;
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000

index: 817
db_id: world_1
medium pred: select language, countrycode from countrylanguage group by countrycode order by percentage desc limit 1;
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode

index: 818
db_id: world_1
medium pred: select countrycode, language, isofficial from countrylanguage group by language order by percentage desc limit 1;
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode

index: 819
db_id: world_1
extra pred: select countrycode from countrylanguage where language = "Spanish" group by countrycode order by percentage desc limit 1
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

index: 820
db_id: world_1
extra pred: select count(*) from countrylanguage where language = "Spanish"
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

index: 821
db_id: world_1
medium pred: select countrycode from countrylanguage where language = "Spanish" group by countrycode order by percentage desc limit 1
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

index: 822
db_id: world_1
medium pred: select countrycode from countrylanguage where language = "Spanish"
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

index: 845
db_id: orchestra
extra pred: select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t1.name order by count(*) desc limit 1
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1

index: 846
db_id: orchestra
extra pred: select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t1.name order by count(*) desc limit 1
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1

index: 852
db_id: orchestra
medium pred: select major_record_format from orchestra group by major_record_format order by count(*) desc limit 1
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC

index: 861
db_id: orchestra
medium pred: select distinct t1.year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id = t2.orchestra_id group by t1.year_of_founded having count(*) > 1
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1

index: 878
db_id: network_1
medium pred: select count(*) from highschooler group by grade
medium gold: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade

index: 884
db_id: network_1
medium pred: select count(*), t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.name
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id

index: 885
db_id: network_1
medium pred: select t1.name, count(*) from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.name
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

index: 887
db_id: network_1
extra pred: select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.name order by count(*) desc limit 1
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

index: 888
db_id: network_1
extra pred: select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.name order by count(*) desc limit 1
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

index: 891
db_id: network_1
hard pred: select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id where t2.friend_id = t1.id
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"

index: 892
db_id: network_1
hard pred: select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id where t1.name = "Kyle"
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"

index: 899
db_id: network_1
hard pred: select student_id from friend where student_id in (select student_id from highschooler where grade = "9" and id in (select liked_id from likes))
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes

index: 900
db_id: network_1
hard pred: select student_id from friend intersect select student_id from likes
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes

index: 901
db_id: network_1
hard pred: select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id join likes as t3 on t2.friend_id = t3.student_id where t3.liked_id != t2.student_id
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id

index: 902
db_id: network_1
hard pred: select name from highschooler where id in (select student_id from friend group by student_id having count(*) = 2 intersect select student_id from likes group by student_id having count(*) = 2)
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id

index: 903
db_id: network_1
medium pred: select count(*), t1.name from highschooler as t1 join likes as t2 on t1.id = t2.liked_id group by t2.student_id
medium gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id

index: 905
db_id: network_1
medium pred: select t1.name, count(*) from highschooler as t1 join likes as t2 on t1.id = t2.liked_id group by t1.name
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

index: 906
db_id: network_1
medium pred: select t1.name, count(*) from highschooler as t1 join likes as t2 on t1.id = t2.liked_id group by t1.name
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

index: 907
db_id: network_1
extra pred: select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.liked_id group by t2.liked_id order by count(*) desc limit 1
extra gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

index: 908
db_id: network_1
extra pred: select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.liked_id group by t2.liked_id order by count(*) desc limit 1
extra gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

index: 909
db_id: network_1
medium pred: select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.liked_id group by t2.liked_id having count(*) >= 2
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2

index: 910
db_id: network_1
medium pred: select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.liked_id group by t2.liked_id having count(*) >= 2
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2

index: 911
db_id: network_1
hard pred: select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.id having count(*) >= 2 where t1.grade > 5
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2

index: 916
db_id: network_1
hard pred: select avg(t1.grade) from highschooler as t1 join friend as t2 on t1.id = t2.student_id
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

index: 919
db_id: dog_kennels
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals

index: 920
db_id: dog_kennels
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals

index: 921
db_id: dog_kennels
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )

index: 922
db_id: dog_kennels
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )

index: 923
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. The state contains 1s such as Indiana. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. The state contains 1s such as Indiana. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2

index: 924
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. The state contains 1s such as Indiana. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. The state contains 1s such as Indiana. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2

index: 925
db_id: dog_kennels
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )

index: 926
db_id: dog_kennels
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )

index: 927
db_id: dog_kennels
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs

index: 928
db_id: dog_kennels
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs

index: 929
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id

index: 930
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id

index: 931
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

index: 932
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

index: 933
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2

index: 934
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2

index: 935
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1

index: 936
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1

index: 937
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

index: 938
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

index: 939
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1

index: 940
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1

index: 941
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1

index: 942
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1

index: 943
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2

index: 944
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2

index: 945
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )

index: 946
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )

index: 947
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id

index: 948
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id

index: 949
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code

index: 950
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code

index: 951
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

index: 952
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

index: 953
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

index: 954
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

index: 955
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )

index: 956
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )

index: 957
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. The state contains 1s such as Virginia. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments select t1.professional_id from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.date_of_treatment between "2015-01-01" and "2015-12-31"
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'

index: 958
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. The state contains 1s such as Virginia. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments select t1.professional_id from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.date_of_treatment between "2015-01-01" and "2015-12-31"
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'

index: 959
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id

index: 960
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id

index: 961
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )

index: 962
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )

index: 963
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. The state contains 1s such as Wisconsin. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. The state contains 1s such as Wisconsin, Hawaii. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'

index: 964
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. The state contains 1s such as Wisconsin. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. The state contains 1s such as Wisconsin, Hawaii. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'

index: 965
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT date_arrived ,  date_departed FROM Dogs

index: 966
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT date_arrived ,  date_departed FROM Dogs

index: 967
db_id: dog_kennels
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments

index: 968
db_id: dog_kennels
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments

index: 969
db_id: dog_kennels
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
easy gold: SELECT count(DISTINCT professional_id) FROM Treatments

index: 970
db_id: dog_kennels
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
easy gold: SELECT count(DISTINCT professional_id) FROM Treatments

index: 971
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'

index: 972
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'

index: 973
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'

index: 974
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'

index: 975
db_id: dog_kennels
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
hard gold: SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )

index: 976
db_id: dog_kennels
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
hard gold: SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )

index: 977
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1

index: 978
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1

index: 979
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )

index: 980
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: select count(*) from dogs where dog_id not in ( select dog_id from treatments )

index: 981
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )

index: 982
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )

index: 983
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )

index: 984
db_id: dog_kennels
extra pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
extra gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )

index: 985
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1

index: 986
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1

index: 987
db_id: dog_kennels
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
easy gold: SELECT avg(age) FROM Dogs

index: 988
db_id: dog_kennels
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
easy gold: SELECT avg(age) FROM Dogs

index: 989
db_id: dog_kennels
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
easy gold: SELECT max(age) FROM Dogs

index: 990
db_id: dog_kennels
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
easy gold: SELECT max(age) FROM Dogs

index: 991
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT charge_type ,  charge_amount FROM Charges

index: 992
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT charge_type ,  charge_amount FROM Charges

index: 993
db_id: dog_kennels
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
easy gold: SELECT max(charge_amount) FROM Charges

index: 994
db_id: dog_kennels
easy pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
easy gold: SELECT max(charge_amount) FROM Charges

index: 995
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT email_address ,  cell_number ,  home_phone FROM professionals

index: 996
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT email_address ,  cell_number ,  home_phone FROM professionals

index: 997
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs

index: 998
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs

index: 999
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code

index: 1000
db_id: dog_kennels
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.abandoned_yn = 'N'
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code

index: 1019
db_id: singer
medium pred: select title, name from song union select title, name from singer
medium gold: SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID

index: 1029
db_id: singer
hard pred: select citizenship from singer where birth_year < 1945 and birth_year > 1955
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955

index: 1032
db_id: real_estate_properties
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is real_estate_properties contains tables such as ref_feature_types, ref_property_types, other_available_features, properties, other_property_features. Table ref_feature_types has columns such as feature_type_code, feature_type_name. feature_type_code is the primary key. Table ref_property_types has columns such as property_type_code, property_type_description. property_type_code is the primary key. Table other_available_features has columns such as feature_id, feature_type_code, feature_name, feature_description. feature_id is the primary key. The feature_name contains 1s such as AirCon. Table properties has columns such as property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details. property_id is the primary key. Table other_property_features has columns such as property_id, feature_id, property_feature_description.  is the primary key. The feature_type_code of other_available_features is the foreign key of feature_type_code of ref_feature_types. The property_type_code of properties is the foreign key of property_type_code of ref_property_types. The property_id of other_property_features is the foreign key of property_id of properties. The feature_id of other_property_features is the foreign key of feature_id of other_available_features., So please tell me What select t1.feature_type_name from ref_feature_types as t1 join other_available_features as t2 on t1.feature_type_code = t2.feature_type_code where t2.feature_name = "AirCon"
medium gold: SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"

index: 1033
db_id: real_estate_properties
medium pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is real_estate_properties contains tables such as ref_feature_types, ref_property_types, other_available_features, properties, other_property_features. Table ref_feature_types has columns such as feature_type_code, feature_type_name. feature_type_code is the primary key. Table ref_property_types has columns such as property_type_code, property_type_description. property_type_code is the primary key. Table other_available_features has columns such as feature_id, feature_type_code, feature_name, feature_description. feature_id is the primary key. Table properties has columns such as property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details. property_id is the primary key. Table other_property_features has columns such as property_id, feature_id, property_feature_description.  is the primary key. The feature_type_code of other_available_features is the foreign key of feature_type_code of ref_feature_types. The property_type_code of properties is the foreign key of property_type_code of ref_property_types. The property_id of other_property_features is the foreign key of property_id of properties. The feature_id of other_property_features is the foreign key of feature_id of other_available_features., So please tell me Show the property type descriptions of properties belonging to that code select property_type_description from ref_property_types where property_type_code = "apt"
medium gold: SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code

index: 1034
db_id: real_estate_properties
hard pred: I want you to act as a SQL terminal in front of an example database, you need to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.  The instruction is real_estate_properties contains tables such as ref_feature_types, ref_property_types, other_available_features, properties, other_property_features. Table ref_feature_types has columns such as feature_type_code, feature_type_name. feature_type_code is the primary key. Table ref_property_types has columns such as property_type_code, property_type_description. property_type_code is the primary key. The property_type_code contains 1s such as Apartment, House. Table other_available_features has columns such as feature_id, feature_type_code, feature_name, feature_description. feature_id is the primary key. Table properties has columns such as property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details. property_id is the primary key. The property_type_code contains 1s such as Apartment, House. Table other_property_features has columns such as property_id, feature_id, property_feature_description.  is the primary key. The feature_type_code of other_available_features is the foreign key of feature_type_code of ref_feature_types. The property_type_code of properties is the foreign key of property_type_code of ref_property_types. The property_id of other_property_features is the foreign key of property_id of properties. The feature_id of other_property_features is the foreign select t1.feature_type_name from ref_feature_types as t1 join other_available_features as t2 on t1.feature_type_code = t2.feature_type_code where t2.feature_name = "select t1.feature_type_name from ref_feature_types as t1 join other_available_features as t2 on t1.feature_type_code = t2.feature_type_code where t2.feature_name = " select t1.feature_type_name from ref_feature_types as t1 join other_available_features as t2 on t1.feature_type_code = t2.feature_type_code where t2.feature_name = " select t1.feature_type_name from ref_feature_types as t1 join other_available_features as t2 on t1.feature_type_code = t2.feature_type_code where t2.feature_name = " select t1.feature_type_name from ref_feature_types as t1 join other_available_features as t2 on t1.feature_type_code = t
hard gold: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1

